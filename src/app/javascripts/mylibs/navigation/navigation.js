// Generated by CoffeeScript 1.4.0
(function() {

  define([], function() {
    "use strict";

    var callbacks, pub;
    callbacks = {
      to: {},
      from: {},
      always: []
    };
    return pub = {
      navigate: function(view) {
        var callback, deferreds, previous, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
        deferreds = [];
        previous = window.APP.app.view().id;
        _ref = callbacks.always;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          callback = _ref[_i];
          callback(previous, view);
        }
        if (previous in callbacks.from) {
          _ref1 = callbacks.from[previous];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            callback = _ref1[_j];
            deferreds.push(callback());
          }
        }
        if (view in callbacks.to) {
          _ref2 = callbacks.to[view];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            callback = _ref2[_k];
            deferreds.push(callback());
          }
        }
        return $.when.apply($, deferreds).done(function() {
          return window.APP.app.navigate(view);
        });
      },
      navigating: {
        always: function(callback) {
          return callbacks.always.push(callback);
        },
        to: function(view, callback) {
          if (!(view in callbacks.to)) {
            callbacks.to[view] = [];
          }
          return callbacks.to[view].push(callback);
        },
        from: function(view, callback) {
          if (!(view in callbacks.from)) {
            callbacks.from[view] = [];
          }
          return callbacks.from[view].push(callback);
        }
      }
    };
  });

}).call(this);
