// Generated by CoffeeScript 1.4.0
(function() {

  define([], function() {
    var callbacks, keydown, pub, trigger;
    callbacks = {};
    trigger = function(key) {
      var data, _i, _len, _ref, _results;
      _ref = callbacks[key];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        if (data.predicate()) {
          _results.push(data.callback());
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    keydown = function(e) {
      return trigger(e.which);
    };
    return pub = {
      init: function() {
        return $(document).keydown = keydown;
      },
      focused: {
        nothing: function() {
          return document.activeElement === null;
        },
        element: function(element) {
          return function() {
            return $(document.activeElement) === element;
          };
        }
      },
      keys: {
        arrows: {
          up: 38,
          down: 40,
          left: 37,
          right: 39
        },
        esc: 27,
        space: ' '.charCodeAt(0),
        enter: 13,
        w: 'W'.charCodeAt(0),
        page: {
          up: 33,
          down: 34
        }
      },
      on: function(predicate, key, callback) {
        if (!(key in callbacks)) {
          callbacks[key] = [];
        }
        return callbacks[key].push({
          predicate: predicate,
          callback: callback
        });
      },
      off: function(key, callback) {
        var data, index, _i, _len, _ref, _results;
        _ref = callbacks[key];
        _results = [];
        for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
          data = _ref[index];
          if (data.callback === callback) {
            callbacks[key].splice(index, 1);
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };
  });

}).call(this);
