// Generated by CoffeeScript 1.3.3
(function() {

  define(['mylibs/file/filewrapper'], function(filewrapper) {
    /*     Utils
    
    This file contains utility functions and normalizations. this used to contain more functions, but
    most have been moved into the extension
    */

    var bufferCanvas, bufferContext, pub, scaleCanvas, scaleContext;
    bufferCanvas = document.createElement("canvas");
    bufferCanvas.width = 720;
    bufferCanvas.height = 480;
    bufferContext = bufferCanvas.getContext("2d");
    scaleCanvas = document.createElement("canvas");
    scaleCanvas.width = bufferCanvas.width / 2;
    scaleCanvas.height = bufferCanvas.height / 2;
    scaleContext = scaleCanvas.getContext("2d");
    scaleContext.scale(0.5, 0.5);
    return pub = {
      getAnimationFrame: function() {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback, element) {
          return window.setTimeout(callback, 1000 / 60);
        };
      },
      createVideo: function(frames) {
        var canvas, ctx, framesDone, i, transcode, _i, _ref, _results;
        transcode = function() {
          var blob, blobUrl, i, name, pair, video, _i, _len, _ref;
          video = new Whammy.Video();
          _ref = (function() {
            var _j, _ref, _results;
            _results = [];
            for (i = _j = 0, _ref = frames.length - 2; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
              _results.push(frames.slice(i, i + 2));
            }
            return _results;
          })();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            pair = _ref[_i];
            video.add(pair[0].imageData, pair[1].time - pair[0].time);
          }
          blob = video.compile();
          frames = [];
          name = new Date().getTime() + ".webm";
          blobUrl = window.URL.createObjectURL(blob);
          console.log(blobUrl);
          filewrapper.save(name, blob);
          return $.publish("/bar/time/hide");
        };
        canvas = document.createElement("canvas");
        canvas.width = 720;
        canvas.height = 480;
        ctx = canvas.getContext("2d");
        framesDone = 0;
        _results = [];
        for (i = _i = 0, _ref = frames.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push((function(i) {
            bufferContext.putImageData(frames[i].imageData, 0, 0);
            scaleContext.drawImage(bufferCanvas, 0, 0);
            frames[i] = {
              imageData: scaleCanvas.toDataURL('image/webp', 0.8),
              time: frames[i].time
            };
            ++framesDone;
            if (framesDone === frames.length) {
              return transcode();
            }
          })(i));
        }
        return _results;
      }
    };
  });

}).call(this);
