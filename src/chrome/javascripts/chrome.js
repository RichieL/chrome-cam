// Generated by CoffeeScript 1.4.0
(function() {

  define(['mylibs/postman/postman', 'mylibs/utils/utils', 'mylibs/file/file', 'mylibs/localization/localization', 'libs/face/track', 'mylibs/effects/effects'], function(postman, utils, file, localization, face, effects) {
    'use strict';

    var canvas, capture, ctx, draw, effect, errback, frame, hollaback, iframe, menu, paused, pub, supported, track, update;
    iframe = iframe = document.getElementById("iframe");
    canvas = document.getElementById("canvas");
    ctx = canvas.getContext("2d");
    track = {
      faces: []
    };
    paused = false;
    frame = 0;
    supported = true;
    effect = effects.data[0];
    menu = function() {
      chrome.contextMenus.onClicked.addListener(function(info, tab) {
        return $.publish("/postman/deliver", [{}, "/menu/click/" + info.menuItemId]);
      });
      return $.subscribe("/menu/enable", function(isEnabled) {
        var menus, _i, _len, _results;
        menus = ["chrome-cam-about-menu"];
        _results = [];
        for (_i = 0, _len = menus.length; _i < _len; _i++) {
          menu = menus[_i];
          _results.push(chrome.contextMenus.update(menu, {
            enabled: isEnabled
          }));
        }
        return _results;
      });
    };
    draw = function() {
      update();
      return window.requestAnimationFrame(draw);
    };
    update = function() {
      if (paused) {
        return;
      }
      ctx.drawImage(video, 0, 0, video.width, video.height);
      if (effect.tracks && frame % 4 === 0) {
        track = face.track(canvas);
      }
      frame++;
      effects.advance(canvas);
      return effect.filter(canvas, canvas, frame, track);
    };
    capture = function() {
      var image, name, saveFinished;
      image = canvas.toDataURL("image/jpeg", 1.0);
      name = new Date().getTime();
      file = {
        type: "jpg",
        name: "" + name + ".jpg",
        file: image
      };
      $.publish("/file/save", [file]);
      return saveFinished = $.subscribe("/file/saved/" + file.name, function() {
        $.unsubscribe(saveFinished);
        return $.publish("/postman/deliver", [file, "/captured/image"]);
      });
    };
    hollaback = function(stream) {
      var video;
      video = document.getElementById("video");
      video.src = window.URL.createObjectURL(stream);
      video.play();
      return window.requestAnimationFrame(draw);
    };
    errback = function() {
      return update = function() {
        paused = true;
        return $.publish("/postman/deliver", [{}, "/camera/unsupported"]);
      };
    };
    return pub = {
      init: function() {
        utils.init();
        $.subscribe("/camera/pause", function(message) {
          return paused = message.paused;
        });
        iframe.src = "app/index.html";
        postman.init(iframe.contentWindow);
        navigator.webkitGetUserMedia({
          video: true
        }, hollaback, errback);
        $.subscribe("/localization/request", function() {
          return $.publish("/postman/deliver", [localization, "/localization/response"]);
        });
        $.subscribe("/effects/request", function() {
          var e, filters;
          filters = (function() {
            var _i, _len, _ref, _results;
            _ref = effects.data;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              e = _ref[_i];
              _results.push({
                id: e.id,
                name: e.name
              });
            }
            return _results;
          })();
          return $.publish("/postman/deliver", [filters, "/effects/response"]);
        });
        $.subscribe("/effects/select", function(id) {
          var e, _i, _len, _ref, _results;
          _ref = effects.data;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            e = _ref[_i];
            if (e.id === id) {
              _results.push(effect = e);
            }
          }
          return _results;
        });
        $.subscribe("/window/close", function() {
          return window.close();
        });
        $.subscribe("/camera/capture", capture);
        $.subscribe("/camera/pause", function(message) {
          if (message.paused) {
            return $(canvas).hide();
          } else {
            return $(canvas).show();
          }
        });
        file.init();
        face.init(0, 0, 0, 0);
        menu();
        return $(iframe).focus();
      }
    };
  });

}).call(this);
