// Generated by CoffeeScript 1.4.0
(function() {

  define([], function() {
    'use strict';

    var OFFSET, destination, elements, pub, slideIn, slideOut, template, wrapper;
    OFFSET = 10;
    template = null;
    destination = null;
    elements = [];
    wrapper = null;
    slideIn = function(element, index) {
      var deferred, end;
      deferred = $.Deferred();
      end = function(event) {
        element.off("webkitTransitionEnd", end);
        return deferred.resolve();
      };
      element.on("webkitTransitionEnd", end);
      element.addClass("slide-in-" + index);
      return deferred.promise();
    };
    slideOut = function(element) {
      var end;
      end = function(event) {
        var offset;
        element.off("webkitTransitionEnd", end);
        offset = element.offset();
        offset.left += OFFSET;
        offset.top -= OFFSET;
        element.offset(offset);
        return element.removeClass("slide-out");
      };
      element.on("webkitTransitionEnd", end);
      return element.addClass("slide-out");
    };
    return pub = {
      init: function() {
        template = $("#transfer-animation-template div");
        destination = $("#destination");
        return wrapper = $(".wrapper");
      },
      setup: function() {
        return elements = [];
      },
      add: function(file, progress) {
        var container, element, _i, _len;
        container = template.clone();
        container.offset(wrapper.offset());
        container.width(wrapper.width());
        container.height(wrapper.height());
        $("<img />", {
          src: file.file
        }).appendTo(container);
        container.appendTo($("body"));
        if (progress.count > 1 && progress.index < progress.count - 1) {
          container.css("z-index", 999);
          setTimeout((function() {
            return slideOut(container);
          }), 1);
          for (_i = 0, _len = elements.length; _i < _len; _i++) {
            element = elements[_i];
            element.css({
              "z-index": element.css("z-index") - 1
            });
            setTimeout((function() {
              return slideOut(element, 1);
            }), 1);
          }
        }
        return elements.push(container);
      },
      run: function(callback) {
        var deferreds, element, key, last;
        last = elements.pop();
        deferreds = [];
        deferreds = (function() {
          var _i, _len, _results;
          _results = [];
          for (key = _i = 0, _len = elements.length; _i < _len; key = ++_i) {
            element = elements[key];
            _results.push(slideIn(element, key));
          }
          return _results;
        })();
        return $.when.apply($, deferreds).done(function() {
          return kendo.fx(last).transfer(destination).duration(1000).play().done(function() {
            var _i, _len;
            last.remove();
            for (_i = 0, _len = elements.length; _i < _len; _i++) {
              element = elements[_i];
              element.remove();
            }
            elements = [];
            return callback();
          });
        });
      }
    };
  });

}).call(this);
