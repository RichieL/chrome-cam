// Generated by CoffeeScript 1.4.0
(function() {

  define(['mylibs/utils/utils'], function(utils) {
    /*     File
    
    The file module takes care of all the reading and writing to and from the file system
    */

    var blobBuiler, clear, compare, destroy, download, errorHandler, fileListing, fileSystem, getFileExtension, loadFile, myPicturesDir, pub, readBulk, readFile, save, withFileSystem;
    window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem;
    fileSystem = null;
    myPicturesDir = {};
    blobBuiler = {};
    compare = function(a, b) {
      if (a.name < b.name) {
        return -1;
      }
      if (a.name > b.name) {
        return 1;
      }
      return 0;
    };
    getFileExtension = function(filename) {
      return filename.split('.').pop();
    };
    errorHandler = function(e) {
      var msg;
      msg = '';
      console.log(e);
      if (e.type === "error") {
        switch (e.code || e.target.error.code) {
          case FileError.QUOTA_EXCEEDED_ERR:
            msg = 'QUOTA_EXCEEDED_ERR';
            break;
          case FileError.NOT_FOUND_ERR:
            msg = 'NOT_FOUND_ERR';
            break;
          case FileError.SECURITY_ERR:
            msg = 'SECURITY_ERR';
            break;
          case FileError.INVALID_MODIFICATION_ERR:
            msg = 'INVALID_MODIFICATION_ERR';
            break;
          case FileError.INVALID_STATE_ERR:
            msg = 'INVALID_STATE_ERR';
            break;
          default:
            msg = 'Unknown Error';
        }
      }
      $.publish("/notify/show", ["File Error", msg, true]);
      return $.publish("/notify/show", ["File Access Denied", "Access to the file system could not be obtained.", false]);
    };
    withFileSystem = function(fn) {
      if (fileSystem) {
        return fn(fileSystem);
      } else {
        return window.webkitStorageInfo.requestQuota(PERSISTENT, 5000 * 1024, function(grantedBytes) {
          var success;
          success = function(fs) {
            fileSystem = fs;
            return fn(fs);
          };
          return window.requestFileSystem(PERSISTENT, grantedBytes, success, errorHandler);
        });
      }
    };
    save = function(name, blob) {
      var onwrite;
      if (typeof blob === "string") {
        blob = utils.toBlob(blob);
      }
      window.theBlob = blob;
      onwrite = function(e) {
        $.publish("/share/gdrive/upload", [blob]);
        $.publish("/postman/deliver", [{}, "/file/saved/" + name, []]);
        return $.publish("/file/saved/" + name);
      };
      return withFileSystem(function(fs) {
        return fs.root.getFile(name, {
          create: true
        }, function(fileEntry) {
          return fileEntry.createWriter(function(fileWriter) {
            fileWriter.onwrite = onwrite;
            fileWriter.onerror = errorHandler;
            return fileWriter.write(blob);
          });
        }, errorHandler);
      });
    };
    destroy = function(name) {
      return withFileSystem(function() {
        return fileSystem.root.getFile(name, {
          create: false
        }, function(fileEntry) {
          return fileEntry.remove(function() {
            return $.publish("/postman/deliver", [
              {
                message: ""
              }, "/file/deleted/" + name, []
            ]);
          }, errorHandler);
        }, errorHandler);
      });
    };
    download = function(name, dataURL) {
      var blob;
      blob = utils.toBlob(dataURL);
      return chrome.fileSystem.chooseEntry({
        type: "saveFile",
        suggestedName: name
      }, function(fileEntry) {
        if (fileEntry == null) {
          return;
        }
        return fileEntry.createWriter(function(fileWriter) {
          fileWriter.onwriteend = function(e) {};
          fileWriter.onerror = function(e) {
            return errorHandler(e);
          };
          return fileWriter.write(blob);
        });
      });
    };
    fileListing = function() {
      return withFileSystem(function(fs) {
        return fs.root.getDirectory("MyPictures", {
          create: true
        }, function(dirEntry) {
          var dirReader, entries;
          entries = [];
          dirReader = fs.root.createReader();
          return dirReader.readEntries(function(results) {
            var entry, _i, _len;
            for (_i = 0, _len = results.length; _i < _len; _i++) {
              entry = results[_i];
              if (entry.isFile) {
                entries.push({
                  name: entry.name,
                  type: entry.name.split(".").pop()
                });
              }
            }
            return $.publish("/postman/deliver", [
              {
                message: entries
              }, "/file/listing/response"
            ]);
          });
        }, errorHandler);
      });
    };
    loadFile = function(dirEntry, filename) {
      var deferred;
      deferred = $.Deferred();
      dirEntry.getFile("/" + filename, {
        create: false
      }, function(fileEntry) {
        var name, type;
        name = fileEntry.name;
        type = name.split(".").pop();
        return fileEntry.file(function(file) {
          var reader;
          reader = new FileReader();
          reader.onloadend = function(e) {
            var data;
            data = {
              name: name,
              type: type,
              file: this.result
            };
            return deferred.resolve(data);
          };
          return reader.readAsDataURL(file);
        });
      }, errorHandler);
      return deferred.promise();
    };
    readFile = function(filename) {
      return withFileSystem(function(fs) {
        return fs.root.getDirectory("MyPictures", {
          create: true
        }, function(dirEntry) {
          return loadFile(dirEntry, filename).done(function(data) {
            return $.publish("/postman/deliver", [
              {
                message: data
              }, "/file/read/" + filename
            ]);
          });
        });
      });
    };
    readBulk = function(files, token) {
      return withFileSystem(function(fs) {
        return fs.root.getDirectory("MyPictures", {
          create: true
        }, function(dirEntry) {
          var deferreds, entries, file;
          entries = [];
          deferreds = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = files.length; _i < _len; _i++) {
              file = files[_i];
              _results.push(loadFile(dirEntry, file));
            }
            return _results;
          })();
          return $.when.apply($, deferreds).then(function() {
            entries = Array.prototype.slice.call(arguments, 0);
            return $.publish("/postman/deliver", [
              {
                message: entries
              }, "/file/bulk/" + token
            ]);
          });
        });
      });
    };
    clear = function() {
      return withFileSystem(function(fs) {
        var dirReader;
        dirReader = fs.root.createReader();
        return dirReader.readEntries(function(entries) {
          var deletedCount, entry, totalCount, _i, _len, _results;
          deletedCount = 0;
          totalCount = entries.length;
          _results = [];
          for (_i = 0, _len = entries.length; _i < _len; _i++) {
            entry = entries[_i];
            _results.push((function(entry) {
              return entry.remove(function() {
                ++deletedCount;
                if (deletedCount === totalCount) {
                  return $.publish("/postman/deliver", [{}, "/file/cleared"]);
                }
              });
            })(entry));
          }
          return _results;
        });
      });
    };
    return pub = {
      init: function(kb) {
        $.subscribe("/file/save", function(message) {
          return save(message.name, message.file);
        });
        $.subscribe("/file/delete", function(message) {
          return destroy(message.name);
        });
        $.subscribe("/file/download", function(message) {
          return download(message.name, message.file);
        });
        $.subscribe("/file/clear", function(message) {
          return clear();
        });
        $.subscribe("/file/listing", function(message) {
          return fileListing();
        });
        $.subscribe("/file/read", function(message) {
          return readFile(message.file);
        });
        return $.subscribe("/file/bulk", function(message) {
          return readBulk(message.files, message.token);
        });
      }
    };
  });

}).call(this);
